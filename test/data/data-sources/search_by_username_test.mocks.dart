// Mocks generated by Mockito 5.4.5 from annotations
// in github_user_finder/test/data/data-sources/search_by_username_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:github_user_finder/modules/search-user/data/data-sources/local/cache_user_service.dart'
    as _i6;
import 'package:github_user_finder/modules/search-user/data/data-sources/remote/github_api_service.dart'
    as _i4;
import 'package:github_user_finder/modules/search-user/data/models/user_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GithubApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubApiService extends _i1.Mock implements _i4.GithubApiService {
  MockGithubApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.UserModel> fetchUser(String? username) => (super.noSuchMethod(
        Invocation.method(
          #fetchUser,
          [username],
        ),
        returnValue: _i5.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #fetchUser,
            [username],
          ),
        )),
      ) as _i5.Future<_i2.UserModel>);
}

/// A class which mocks [CacheUserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheUserService extends _i1.Mock implements _i6.CacheUserService {
  MockCacheUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i5.Future<_i3.Database>.value(_FakeDatabase_1(
          this,
          Invocation.getter(#database),
        )),
      ) as _i5.Future<_i3.Database>);

  @override
  _i5.Future<void> cacheUser(_i2.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #cacheUser,
          [user],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.UserModel?> getCachedUserByUsername(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedUserByUsername,
          [username],
        ),
        returnValue: _i5.Future<_i2.UserModel?>.value(),
      ) as _i5.Future<_i2.UserModel?>);

  @override
  _i5.Future<List<_i2.UserModel>> getLastUsers({int? limit = 5}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastUsers,
          [],
          {#limit: limit},
        ),
        returnValue: _i5.Future<List<_i2.UserModel>>.value(<_i2.UserModel>[]),
      ) as _i5.Future<List<_i2.UserModel>>);
}
